use lib::base::*

Test_suite {
    .name = @file_name()
    .mute = true

    Test {
        .name = "declare and use an integer"
        .source = Source {
            "let a: Int32 = 1\n"
            "a + 5\n"
        }
        .solo = true
        .has_error = false

        let root = Ast_node {
            .type = Ast_type::Stmts
            .tu = Type_use {
                .td = _Int32
            }
        }

        root

        # 'stmts' blocks each have an environment with symbols associated with
        # them. Environments are embedded into the AST and use a stack/tree
        # with 'prev' pointers to point down the stack to previous
        # environments. The environment stack/tree and sequence numbers are to
        # find lexically and temporally valid variables even after the AST is
        # fully created.

        let _ = Environment {
            .@property_of(root, "env")
            .prev = env0                # base environment
            .symbols = Symbols {
                .a = Symbol {           # 'a' is declared in the block
                    .type = Symbol_type::Variable
                    .tu = Type_use {
                        .td = _Int32
                    }

                    # the 'a' variable can be used by id nodes
                    # that are in this environment or descendant
                    # environments and where the id seq is greater
                    # than the symbol seq
                    .seq = 4
                }
            }
        }

        # line 1
        let let_stmt = Ast_node {
            @child_of(root)
            .type = Ast_type::Let
        }

        let let_a = Ast_node {
            .@child_of(let_stmt)
            .type = Ast_type::Id
            .value = "a"
        }

        let let_type = Ast_node {
            .@child_of(let_stmt)
            .type = Ast_type::Type
            .tu = Type_use {
                .td = _Int32
            }
        }

        let let_number = Ast_node {
            .@child_of(let_stmt)
            .type = Ast_type::Number
            .value = "1"
            .tu = Type_use {
                .td = _Int32
            }
        }

        # line 2
        let add = Ast_node {
            .@child_of(root)
            .type = Ast_type::Add
            .tu = Type_use {
                .td = _Int32
            }
        }

        let add_a = Ast_node {
            .@child_of(add)
            .type = Ast_type::Id
            .value = "a"
            .tu = Type_use {
                .td = _Int32
            }
            .seq = 5            # search for ancestor environment with symbol
                                # 'a' that has a sequence number is less than 5

        let add_number = Ast_node {
            .@child_of(add)
            .type = Ast_type::Number
            .value = "5"
            .tu = Type_use {
                .td = _Int32
            }
        }
    }
}