element Test_suite {
    properties {
        name: String `required`
        solo: Bool      # only run this suite
        mute: Bool      # exclude this suite from running
    }

    children {
        Test
    }
}

element Test {
    properties {
        name: String `required`
        source: Source `required`
        has_error: Bool `required`
        solo: Bool      # only run this test
        mute: Bool      # exclude this test from running
        errors: Errors
    }

    children {
        Ast
    }
}

element Source {
    children {
        String
    }
}

element Errors {
    children {
        Error
    }
}

element Error {
    properties {
        message: String
        start_pos: Integer
        end_pos: Integer
        line: Integer
        col: Integer
    }
}

element Ast {
    properties {
        type: Ast_type `required`
        value: String
        tu: Type_use
    }
}

enum Ast_type {
    Stmts
    Let
    Number
    Type
    Id
}

element Type_use {
    properties {
        td: Type_def
        dim: Integer        # array dimension if td is type Array
    }
}

element Type_def {
    properties {
        name: String `required`
        type: Type_def_type `required`
        bit_count: Integer
        is_signed: Bool
    }
}

enum Type_def_type {
    Int32
    Real64
}

# built-in element defs
let _Int32 = Type_def {
    .type = Type_def_type::Int32
    .name = "Int32"
    .bit_count = 32
    .is_signed = true
};

let _Real64 = Type_def {
    .type = Type_def_type::Real64
    .name = "Real64"
    .bit_count = 64
    .is_signed = true
};