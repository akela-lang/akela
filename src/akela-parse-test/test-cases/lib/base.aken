element Test_suite
    properties
        name: String `required`
        solo: Bool      # only run this suite
        mute: Bool      # exclude this suite from running
    end

    children
        Test
    end
end

element Test
    properties
        name: String `required`
        source: Source `required`
        has_error: Bool `required`
        solo: Bool      # only run this test
        mute: Bool      # exclude this test from running
        errors: Errors
    end

    children
        Ast
    end
end

element Source
    children
        String
    end
end

element Errors
    children
        Error
    end
end

element Error
    properties
        message: String
        start_pos: Integer
        end_pos: Integer
        line: Integer
        col: Integer
    end
end

element Environment
    properties
        prev: Environment
        symbols: Symbols
    end
end

element Symbols
    properties
        _: Symbol
    end
end

element Symbol
    properties
        type: Symbol_type
        tu: Type_use
        seq: Integer        # sequence number for declared variables
    end
end

enum Symbol_type
    Variable
    Type
    Info
end

element Ast
    properties
        type: Ast_type `required`
        value: String
        tu: Type_use
        seq: Integer        # sequence number for Ast_element id
        env: Environment
    end
end

enum Ast_type
    Stmts
    Let
    Number
    Type
    Id
    Add
    Assign
end

element Type_use
    properties
        td: Type_def
        dim: Integer        # array dimension if td is type Array
    end
end

element Type_def
    properties
        name: String `required`
        type: Type_def_type `required`
        bit_count: Integer
        is_signed: Bool
    end
end

enum Type_def_type
    Integer
    Float
    String
    Bool
end

# built-in element defs
let _Int32 = Type_def {
    .type = Type_def_type::Integer
    .name = "Int32"
    .bit_count = 32
    .is_signed = true
}

let _Real64 = Type_def {
    .type = Type_def_type::Float
    .name = "Real64"
    .bit_count = 64
    .is_signed = true
}

let _String = Type_def {
    .type = Type_def_type::String
    .name = "String"
}

let _Bool = Type_def {
    .type = Type_def_type::Bool
    .name = "Bool"
}

# base environment
let env0 = Environment {
    .symbols = Symbols {
        # built-in types
        .Int32 = Symbol {
            .type = Symbol_type::Type
            .td = _Int32
            .seq = 0
        }
        .Real64 = Symbol {
            .type = Symbol_type::Type
            .td = _Real64
            .seq = 1
        }
        .String = Symbol {
            .type = Symbol_type::Type
            .td = _String
            .seq = 2
        }
        .Bool = Symbol {
            .type = Symbol_type::Type
            .td = _Bool
            .seq = 3
        }
    }
}