element TestSuite {
  properties {
    name: String `required`
    solo: Bool      # only run this suite
    mute: Bool      # exclude this suite from running
  }
}

element Test {
  properties {
    name: String `required`
    solo: Bool      # only run this test
    mute: Bool      # exclude this test from running
    snapshot: Bool  # output snapshot
    has_error: Bool `required`
    errors: Errors
  }
}

element Errors {
  children {
    Error
  }
}

element Error {
  properties {
    message: String
    start_pos: Integer
    end_pos: Integer
    line: Integer
    col: Integer
  }
}

element Ast(AstType) {
  properties {
    value: String
    tu: TypeUse
  }
  children {
    Ast
  }
}

enum AstType {
  None
  Id
  Sign
  Number
  String
  Assign
  Plus
  Minus
  Mult
  Divide
  Stmts
  Function
  Dseq
  Dret
  Call
  Cseq
  If
  ConditionalBranch
  DefaultBranch
  Equality
  NotEqual
  LessThan
  LessThanOrEqual
  GreaterThan
  GreaterThanOrEqual
  Not
  And
  Or
  While
  ForRange
  ForIteration
  Declaration
  ArrayLiteral
  ArraySubscript
  Boolean
  Parenthesis
  Type
  Power
  Type_pool
  Dot
  Struct
  Return
  Eseq
  LetLseq
  LetRseq
  Error
  Prototype
  Extern
  StructLiteral
  StructLiteralField
  Ellipsis
  Impl
  Self
  Const
  Var
}

element TypeUse(TypeUseType) {
  properties {
    td: TypeDef
    dim: Integer        # array dimension if td is type Array
  }
}

enum TypeUseType {
    TypeDef
    FunctionInputs
    FunctionOutputs
    FunctionEllipsis
}

element TypeDef(TypeDefType) {
  properties {
    name: String `required`
    bit_count: Integer
    is_signed: Bool
  }
}

enum TypeDefType {
  None
  Integer
  Float
  Boolean
  Struct
  Function
  Enum
  Tuple
  Module
}

# built-in element defs
const Int32 = TypeDef::Integer {
  .name = "Int32"
  .bit_count = 32
  .is_signed = true
};

const Real64 = TypeDef::Float {
  .name = "Real64"
  .bit_count = 64
  .is_signed = false
};
