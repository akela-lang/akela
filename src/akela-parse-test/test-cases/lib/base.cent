element TestSuite {
  properties {
    name: String `required`
    solo: Bool      # only run this suite
    mute: Bool      # exclude this suite from running
  }
}

element Test {
  properties {
    name: String `required`
    solo: Bool      # only run this test
    mute: Bool      # exclude this test from running
    snapshot: Bool  # output snapshot
    has_error: Bool `required`
  }
}

element Errors {
  children {
    Error
  }
}

element Error {
  properties {
    message: String
    start: Integer
    end: Integer
    line: Integer
    col: Integer
  }
}

element Ast(AstType) {
  properties {
    value: String
    type: Type
  }
  children {
    Ast
  }
}

enum AstType {
  None
  Id
  Sign
  Number
  String
  Assign
  Plus
  Minus
  Mult
  Divide
  Stmts
  Function
  Dseq
  Dret
  Call
  Cseq
  If
  ConditionalBranch
  DefaultBranch
  Equality
  NotEqual
  LessThan
  LessThanOrEqual
  GreaterThan
  GreaterThanOrEqual
  Not
  And
  Or
  While
  ForRange
  ForIteration
  Declaration
  ArrayLiteral
  ArraySubscript
  Boolean
  Parenthesis
  Type
  Power
  Type_pool
  Dot
  Struct
  Return
  Prototype
  Extern
  StructLiteral
  StructLiteralField
  Ellipsis
  Impl
  Const
  Var
}

variant Ast::Id {
    properties {
        value: String
    }
}

variant Ast::Sign {
    properties {
        op: Ast
        right: Ast
    }
}

variant Ast::Number {
    properties {
        value: String
    }
}

enum TypeKind {
  None
  Integer
  Natural
  Real
  Boolean
  Struct
  Array
  Slice
  Pointer
  Function
}

element Type(TypeKind) {
  properties {
    name: String `required`
  }
}

variant Type::Integer {
    properties {
        bit_count: Natural
    }
}

variant Type::Natural {
    properties {
        bit_count: Natural
    }
}

variant Type::Real {
    properties {
        bit_count: Natural
    }
}

variant Type::Struct {
    children {
        TypeField
    }
}

element TypeField {
    properties {
        name: String
        type: Type
    }
}

variant Type::Array {
    properties {
        is_const: Bool
        dim: Natural
        type: Type
    }
}

variant Type::Slice {
    properties {
        type: Type
    }
}

variant Type::Pointer {
    properties {
        type: Type
    }
}

variant Type::Function {
    properties {
        input: Input
        output: Type
    }
}

element Input {
    children {
        TypeParam
    }
}

element TypeParam(TypeParamKind) {
    properties {
        name: String
        type: Type
    }
}

enum TypeParamKind {
    Regular
    Ellipsis
}