        -:    0:Source:/home/miguel/workspace/trade/akela/json-test/test_parse.c
        -:    1:#include <zinc/error_unit_test.h>
        -:    2:#include "zinc/unit_test.h"
        -:    3:#include "json/parse.h"
        -:    4:#include "json/dom.h"
        -:    5:#include "test_parse_tools.h"
        -:    6:
        1:    7:void test_parse_string()
        -:    8:{
        1:    9:    test_name(__func__);
        -:   10:    Json_parse_data pd;
        1:   11:    test_parse_setup(&pd, "\"hello\"");
        -:   12:
        1:   13:    Json_dom* dom = Json_parse(&pd);
        1:   14:    expect_no_errors(pd.el);
        1:   15:    expect_int_equal(dom->type, Json_dom_type_string, "type dom");
        1:   16:    expect_str(&dom->value.string, "hello", "string dom");
        -:   17:
        1:   18:    Json_dom_destroy(dom);
        1:   19:    test_parse_destroy(&pd);
        1:   20:}
        -:   21:
        1:   22:void test_parse_string_escape()
        -:   23:{
        1:   24:    test_name(__func__);
        -:   25:    Json_parse_data pd;
        1:   26:    test_parse_setup(&pd, "\"hello\\tworld\"");
        -:   27:
        1:   28:    Json_dom* dom = Json_parse(&pd);
        1:   29:    expect_no_errors(pd.el);
        1:   30:    expect_int_equal(dom->type, Json_dom_type_string, "type dom");
        1:   31:    expect_str(&dom->value.string, "hello\tworld", "string dom");
        -:   32:
        1:   33:    Json_dom_destroy(dom);
        1:   34:    test_parse_destroy(&pd);
        1:   35:}
        -:   36:
        1:   37:void test_parse_string_escape_unicode()
        -:   38:{
        1:   39:    test_name(__func__);
        -:   40:    Json_parse_data pd;
        1:   41:    test_parse_setup(&pd, "\"\\u0061\"");
        -:   42:
        1:   43:    Json_dom* dom = Json_parse(&pd);
        1:   44:    expect_no_errors(pd.el);
        1:   45:    expect_int_equal(dom->type, Json_dom_type_string, "type dom");
        1:   46:    expect_str(&dom->value.string, "a", "string dom");
        -:   47:
        1:   48:    Json_dom_destroy(dom);
        1:   49:    test_parse_destroy(&pd);
        1:   50:}
        -:   51:
        1:   52:void test_parse_number_integer()
        -:   53:{
        1:   54:    test_name(__func__);
        -:   55:    Json_parse_data pd;
        1:   56:    test_parse_setup(&pd, "30");
        -:   57:
        1:   58:    Json_dom* dom = Json_parse(&pd);
        1:   59:    expect_no_errors(pd.el);
        1:   60:    expect_int_equal(dom->type, Json_dom_type_number, "type dom");
        1:   61:    expect_int_equal(dom->number_type, Json_dom_number_type_integer, "number_type dom");
        1:   62:    expect_long_long_equal(dom->value.integer, 30, "integer dom");
        -:   63:
        1:   64:     Json_dom_destroy(dom);
        1:   65:    test_parse_destroy(&pd);
        1:   66:}
        -:   67:
        1:   68:void test_parse_number_fp()
        -:   69:{
        1:   70:    test_name(__func__);
        -:   71:    Json_parse_data pd;
        1:   72:    test_parse_setup(&pd, "1.8");
        -:   73:
        1:   74:    Json_dom* dom = Json_parse(&pd);
        1:   75:    expect_no_errors(pd.el);
        1:   76:    expect_int_equal(dom->type, Json_dom_type_number, "type dom");
        1:   77:    expect_int_equal(dom->number_type, Json_dom_number_type_fp, "number_type dom");
        1:   78:    expect_double_equal(dom->value.fp, 1.8, "fp dom");
        -:   79:
        1:   80:    Json_dom_destroy(dom);
        1:   81:    test_parse_destroy(&pd);
        1:   82:}
        -:   83:
        1:   84:void test_parse_array_empty()
        -:   85:{
        1:   86:    test_name(__func__);
        -:   87:    Json_parse_data pd;
        1:   88:    test_parse_setup(&pd, "[]");
        -:   89:
        1:   90:    Json_dom* dom = Json_parse(&pd);
        1:   91:    expect_no_errors(pd.el);
        1:   92:    expect_int_equal(dom->type, Json_dom_type_array, "type dom");
        -:   93:
        1:   94:    Json_dom_destroy(dom);
        1:   95:    test_parse_destroy(&pd);
        1:   96:}
        -:   97:
        1:   98:void test_parse_array_one()
        -:   99:{
        1:  100:    test_name(__func__);
        -:  101:    Json_parse_data pd;
        1:  102:    test_parse_setup(&pd, "[1.2]");
        -:  103:
        1:  104:    Json_dom* dom = Json_parse(&pd);
        1:  105:    expect_no_errors(pd.el);
        1:  106:    expect_int_equal(dom->type, Json_dom_type_array, "type dom");
        -:  107:
        1:  108:    Json_dom* a = dom->head;
        1:  109:    assert_ptr(a, "ptr a");
        1:  110:    expect_int_equal(a->type, Json_dom_type_number, "type a");
        1:  111:    expect_int_equal(a->number_type, Json_number_type_fp, "number_type a");
        1:  112:    expect_double_equal(a->value.fp, 1.2, "fp a");
        -:  113:
        1:  114:    Json_dom_destroy(dom);
        1:  115:    test_parse_destroy(&pd);
        1:  116:}
        -:  117:
        1:  118:void test_parse_array_two()
        -:  119:{
        1:  120:    test_name(__func__);
        -:  121:    Json_parse_data pd;
        1:  122:    test_parse_setup(&pd, "[1.2, \"hello\"]");
        -:  123:
        1:  124:    Json_dom* dom = Json_parse(&pd);
        1:  125:    expect_no_errors(pd.el);
        1:  126:    expect_int_equal(dom->type, Json_dom_type_array, "type dom");
        -:  127:
        1:  128:    Json_dom* a = dom->head;
        1:  129:    assert_ptr(a, "ptr a");
        1:  130:    expect_int_equal(a->type, Json_dom_type_number, "type a");
        1:  131:    expect_int_equal(a->number_type, Json_number_type_fp, "number_type a");
        1:  132:    expect_double_equal(a->value.fp, 1.2, "fp a");
        -:  133:
        1:  134:    Json_dom* b = a->next;
        1:  135:    assert_ptr(b, "ptr b");
        1:  136:    expect_int_equal(b->type, Json_dom_type_string, "type b");
        1:  137:    expect_str(&b->value.string, "hello", "string b");
        -:  138:
        1:  139:    Json_dom_destroy(dom);
        1:  140:    test_parse_destroy(&pd);
        1:  141:}
        -:  142:
        1:  143:void test_parse_array_error_no_right_square_bracket()
        -:  144:{
        1:  145:    test_name(__func__);
        -:  146:    Json_parse_data pd;
        1:  147:    test_parse_setup(&pd, "[1.2, \"hello\"");
        -:  148:
        1:  149:    Json_dom* dom = Json_parse(&pd);
        1:  150:    expect_has_errors(pd.el);
        1:  151:    struct error* e = expect_source_error(pd.el, "expected right square bracket");
        1:  152:    assert_ptr(e, "ptr e");
        1:  153:    expect_size_t_equal(e->loc.start_pos, 13, "start pos e");
        1:  154:    expect_size_t_equal(e->loc.end_pos, 16, "end pos e");
        1:  155:    expect_size_t_equal(e->loc.line, 1, "end pos e");
        1:  156:    expect_size_t_equal(e->loc.col, 14, "end pos e");
        -:  157:
        1:  158:    Json_dom_destroy(dom);
        1:  159:    test_parse_destroy(&pd);
        1:  160:}
        -:  161:
        1:  162:void test_parse_array_error_expected_value_after_comma()
        -:  163:{
        1:  164:    test_name(__func__);
        -:  165:    Json_parse_data pd;
        1:  166:    test_parse_setup(&pd, "[1.2, \"hello\",");
        -:  167:
        1:  168:    Json_dom* dom = Json_parse(&pd);
        1:  169:    expect_has_errors(pd.el);
        1:  170:    struct error* e = expect_source_error(pd.el, "expected value");
        1:  171:    assert_ptr(e, "ptr e");
        1:  172:    expect_size_t_equal(e->loc.start_pos, 14, "start pos e");
        1:  173:    expect_size_t_equal(e->loc.end_pos, 17, "end pos e");
        1:  174:    expect_size_t_equal(e->loc.line, 1, "end pos e");
        1:  175:    expect_size_t_equal(e->loc.col, 15, "end pos e");
        -:  176:
        1:  177:    Json_dom_destroy(dom);
        1:  178:    test_parse_destroy(&pd);
        1:  179:}
        -:  180:
        1:  181:void test_parse_boolean_true()
        -:  182:{
        1:  183:    test_name(__func__);
        -:  184:    Json_parse_data pd;
        1:  185:    test_parse_setup(&pd, "true");
        -:  186:
        1:  187:    Json_dom* dom = Json_parse(&pd);
        1:  188:    expect_no_errors(pd.el);
        1:  189:    expect_int_equal(dom->type, Json_dom_type_boolean, "type dom");
        1:  190:    expect_true(dom->value.boolean, "boolean dom");
        -:  191:
        1:  192:    Json_dom_destroy(dom);
        1:  193:    test_parse_destroy(&pd);
        1:  194:}
        -:  195:
        1:  196:void test_parse_boolean_false()
        -:  197:{
        1:  198:    test_name(__func__);
        -:  199:    Json_parse_data pd;
        1:  200:    test_parse_setup(&pd, "false");
        -:  201:
        1:  202:    Json_dom* dom = Json_parse(&pd);
        1:  203:    expect_no_errors(pd.el);
        1:  204:    expect_int_equal(dom->type, Json_dom_type_boolean, "type dom");
        1:  205:    expect_false(dom->value.boolean, "boolean dom");
        -:  206:
        1:  207:    Json_dom_destroy(dom);
        1:  208:    test_parse_destroy(&pd);
        1:  209:}
        -:  210:
        1:  211:void test_parse_null()
        -:  212:{
        1:  213:    test_name(__func__);
        -:  214:    Json_parse_data pd;
        1:  215:    test_parse_setup(&pd, "null");
        -:  216:
        1:  217:    Json_dom* dom = Json_parse(&pd);
        1:  218:    expect_no_errors(pd.el);
        1:  219:    expect_int_equal(dom->type, Json_dom_type_null, "type dom");
        -:  220:
        1:  221:    Json_dom_destroy(dom);
        1:  222:    test_parse_destroy(&pd);
        1:  223:}
        -:  224:
        1:  225:void test_parse_error_token()
        -:  226:{
        1:  227:    test_name(__func__);
        -:  228:    Json_parse_data pd;
        1:  229:    test_parse_setup(&pd, "null{}");
        -:  230:
        1:  231:    Json_dom* dom = Json_parse(&pd);
        1:  232:    expect_has_errors(pd.el);
        1:  233:    struct error* e = expect_source_error(pd.el, "Could not process token: left curly brace");
        1:  234:    assert_ptr(e, "ptr e");
        1:  235:    expect_size_t_equal(e->loc.start_pos, 4, "start pos e");
        1:  236:    expect_size_t_equal(e->loc.end_pos, 5, "end pos e");
        1:  237:    expect_size_t_equal(e->loc.line, 1, "line e");
        1:  238:    expect_size_t_equal(e->loc.col, 5, "col e");
        -:  239:
        1:  240:    Json_dom_destroy(dom);
        1:  241:    test_parse_destroy(&pd);
        1:  242:}
        -:  243:
        1:  244:void test_parse_object_empty()
        -:  245:{
        1:  246:    test_name(__func__);
        -:  247:    Json_parse_data pd;
        1:  248:    test_parse_setup(&pd, "{}");
        -:  249:
        1:  250:    Json_dom* dom = Json_parse(&pd);
        1:  251:    expect_no_errors(pd.el);
        1:  252:    assert_ptr(dom, "ptr dom");
        1:  253:    expect_int_equal(dom->type, Json_dom_type_object, "type dom");
        -:  254:
        1:  255:    Json_dom_destroy(dom);
        1:  256:    test_parse_destroy(&pd);
        1:  257:}
        -:  258:
        1:  259:void test_parse_object_one_property()
        -:  260:{
        1:  261:    test_name(__func__);
        -:  262:    Json_parse_data pd;
        1:  263:    test_parse_setup(&pd,
        -:  264:    "{\n"
        -:  265:        "  \"repeat\": true"
        -:  266:        "}\n"
        -:  267:    );
        -:  268:
        1:  269:    Json_dom* dom = Json_parse(&pd);
        -:  270:
        1:  271:    expect_no_errors(pd.el);
        1:  272:    assert_ptr(dom, "ptr dom");
        1:  273:    expect_int_equal(dom->type, Json_dom_type_object, "type dom");
        -:  274:
        1:  275:    Json_dom* repeat = hash_table_get_str(&dom->value.object, "repeat");
        1:  276:    assert_ptr(repeat, "ptr repeat");
        1:  277:    expect_int_equal(repeat->type, Json_dom_type_boolean, "type repeat");
        1:  278:    expect_true(repeat->value.boolean, "repeat");
        -:  279:
        1:  280:    Json_dom_destroy(dom);
        1:  281:    test_parse_destroy(&pd);
        1:  282:}
        -:  283:
        1:  284:void test_parse_object_two_properties()
        -:  285:{
        1:  286:    test_name(__func__);
        -:  287:    Json_parse_data pd;
        1:  288:    test_parse_setup(&pd,
        -:  289:    "{\n"
        -:  290:        "  \"first_name\": \"Fred\","
        -:  291:        "  \"last_name\": \"Smith\""
        -:  292:        "}\n"
        -:  293:    );
        -:  294:
        1:  295:    Json_dom* dom = Json_parse(&pd);
        1:  296:    expect_no_errors(pd.el);
        1:  297:    assert_ptr(dom, "ptr dom");
        1:  298:    expect_int_equal(dom->type, Json_dom_type_object, "type dom");
        -:  299:
        1:  300:    Json_dom* first_name = hash_table_get_str(&dom->value.object, "first_name");
        1:  301:    assert_ptr(first_name, "ptr first_name");
        1:  302:    expect_int_equal(first_name->type, Json_dom_type_string, "type first_name");
        1:  303:    expect_str(&first_name->value.string, "Fred", "str first_name");
        -:  304:
        1:  305:    Json_dom* last_name = hash_table_get_str(&dom->value.object, "last_name");
        1:  306:    assert_ptr(last_name, "ptr last_name");
        1:  307:    expect_int_equal(last_name->type, Json_dom_type_string, "type last_name");
        1:  308:    expect_str(&last_name->value.string, "Smith", "str last_name");
        -:  309:
        1:  310:    Json_dom_destroy(dom);
        1:  311:    test_parse_destroy(&pd);
        1:  312:}
        -:  313:
        1:  314:void test_parse_object_three_properties()
        -:  315:{
        1:  316:    test_name(__func__);
        -:  317:    Json_parse_data pd;
        1:  318:    test_parse_setup(&pd,
        -:  319:    "{\n"
        -:  320:        "  \"first_name\": \"Fred\",\n"
        -:  321:        "  \"last_name\": \"Smith\",\n"
        -:  322:        "  \"age\": 31\n"
        -:  323:        "}\n"
        -:  324:    );
        -:  325:
        1:  326:    Json_dom* dom = Json_parse(&pd);
        1:  327:    expect_no_errors(pd.el);
        1:  328:    assert_ptr(dom, "ptr dom");
        1:  329:    expect_int_equal(dom->type, Json_dom_type_object, "type dom");
        -:  330:
        1:  331:    Json_dom* first_name = hash_table_get_str(&dom->value.object, "first_name");
        1:  332:    assert_ptr(first_name, "ptr first_name");
        1:  333:    expect_int_equal(first_name->type, Json_dom_type_string, "type first_name");
        1:  334:    expect_str(&first_name->value.string, "Fred", "str first_name");
        -:  335:
        1:  336:    Json_dom* last_name = hash_table_get_str(&dom->value.object, "last_name");
        1:  337:    assert_ptr(last_name, "ptr last_name");
        1:  338:    expect_int_equal(last_name->type, Json_dom_type_string, "type last_name");
        1:  339:    expect_str(&last_name->value.string, "Smith", "str last_name");
        -:  340:
        1:  341:    Json_dom* age = hash_table_get_str(&dom->value.object, "age");
        1:  342:    assert_ptr(age, "ptr age");
        1:  343:    expect_int_equal(age->type, Json_dom_type_number, "type age");
        1:  344:    expect_int_equal(age->number_type, Json_dom_number_type_integer, "type age");
        1:  345:    expect_long_long_equal(age->value.integer, 31, "str age");
        -:  346:
        1:  347:    Json_dom_destroy(dom);
        1:  348:    test_parse_destroy(&pd);
        1:  349:}
        -:  350:
        1:  351:void test_parse()
        -:  352:{
        1:  353:    test_parse_string();
        1:  354:    test_parse_string_escape();
        1:  355:    test_parse_string_escape_unicode();
        -:  356:
        1:  357:    test_parse_number_integer();
        1:  358:    test_parse_number_fp();
        -:  359:
        1:  360:    test_parse_array_empty();
        1:  361:    test_parse_array_one();
        1:  362:    test_parse_array_two();
        1:  363:    test_parse_array_error_no_right_square_bracket();
        1:  364:    test_parse_array_error_expected_value_after_comma();
        -:  365:
        1:  366:    test_parse_boolean_true();
        1:  367:    test_parse_boolean_false();
        1:  368:    test_parse_null();
        -:  369:
        1:  370:    test_parse_error_token();
        -:  371:
        1:  372:    test_parse_object_empty();
        1:  373:    test_parse_object_one_property();
        1:  374:    test_parse_object_two_properties();
        1:  375:    test_parse_object_three_properties();
        1:  376:}
